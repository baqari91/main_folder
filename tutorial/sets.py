# სიმრავლეები
# სიმრავლის პირველი წესია რომ. სიმრავლეში მოთავსებული დუბლიკატების მოთავსება შეუძლებელია. ის ინახავს მხოლოდ უნიკალურ ელემენტებს
# სიმრავლის მეორე თვისება. მათსი მოთავსებული ელემენტების დამახსოვრება არ ხდება ამიტომ არეულად არის წარმოდგენილი
a = {1,2,"text",2}    
print(a)        # 2 იანს დაბეჭდავს მხოლოდ ერთხელ
print(type(a))  # type არის set
b = set()       # ცარიელი სიმრავლის შექმნა.  b = {}  <- ესე შექიმნება ლექსიოკონი ასე რომ ცარიელი სიის შექმნისთვის გამოიყენება მხოლოდ მითითებული ფუნქცია
d = set("text") # d სიმრავლეში შევა მხოლოდ e,x,t რადგან t ორჯერ  არის
print(d)        # მაგალითი
d = set(range(4))  # შეიქმნება სიმრავლე 0 იდან 4 მდე
print (d)
# set(1,3,4) დაბრუნდება ერორი რადგან set() მუშაობს მხოლოდ ერთ არგუმენტზე
d= set([1,3,4]) # თუ გვინდა რამოდენიმე ელემენტის შეტანა შეგვიძლია ლისტის [] დახმარებით შეტანა
print(d)      # მაგალითი შეიქმნა სიმრავლე

d.add("hi")   # სიმრავლეში ელემენტის დამატება, შემთხვევითობის პრინციპით დაემატება ნებისმიერ პოზიციაზე
print(d)
d.add(3)  # შეცდომა არ მოხდება მაგრამ დუბლირების პრინციპის გამო ჩაემატება და უმალ ამოეჭრება რადგან უკვე არის 3იანი სიაში
#d.add(1,3,4) არ დაემატება ასევე რამოდენიმე ელემენტი. დააბრუნებს ერორს
d.update([1,34,5,5]) # აუცილებელია სიის [] გამოყენება. იტერატიული პროცესია ჩაამატებს ნაბიჯ ნაბიჯ ელემენტებს
print(d)
d.update("hello") # ამ შემთხვევაში დაიმარცვლება და ჩაემატება ასოები სათითაოდ
# თუ გვინდა მთლიანი სიტყვის ჩამატება ან უნდა მოვაქციოთ სიის [ ] ფრჩხილებში ან გამოვიყენოთ ადდ ფუნქცია
d.add("hello world") # დაემატება ერთ ელემენტად
print (d)
d.discard("h")  # წაშლის მითითებულ ელემენტს. თუ არ არსებობს ელემენტი არ გამოიტანს ერორს განსხვავებით remove მეთოდისგან
d.remove("e")   # წაშლი მითითებულ ელემენტს. თუ არ არსებობს ელემენტი გამოიტანს ერორს
print(d)
d.pop()         # შემთხვევითად შლის ერთ ერთ ელემეტს
d.clear( )      #  გასუფთავება სიმრავლის. წაშლის სუყველა ელემენტს
print(d)
d=set([1,4,5,6,7,9,"hello"]) # შევქმნათ ახალი სიმრავლე
print(d)
print(len(d))       # რამდენი ელემენტისგან შედგება სიმრავლე
print(4 in d)       # დავაკვირდეთ მიკუთვნებულება
print(333 in d)     # დავაკვირდეთ მიკუთვნებულება
print(8 not in d)   # დავაკვირდეთ მიკუთვნებულება
print( 7 not in d)  # დავაკვირდეთ მიკუთვნებულება

a1={1,2,3}
b1={3,4,5}
g=a1&b1            # თანაკვეთა, ანუ ერთნაირი ელემენთები გამოაქვს ორი სიმრავლიდან
print(g)           # გვავენებს თანაკვეთას
a1 &= b1           # a1 ში წაშალოს ყველა ელემენტი და შეინახოს მხოლოდ თანაკვეთა ორ სიმრავლეს შორის
print (a1)         # 

a1={1,2,3}       
b1={3,4,5}
g1=a1.intersection(b1) # იგივე თანაკეთის პოვნა ოღონდ ფუნქციით
print("ფუნქციით თანაკვეთის პოვნა",g1)
a1.intersection_update(b1) # ფუნქციით თანაკვეთის შენახვა იგივე რაც 44-ე ხაზზე

# სიმრავლეების გაერთიანება
a1={1,2,3}
b1={3,4,5}
g=a1 | b1       # გაერთიანება ინიციალებით
print(g)
g= a1.union(b1) # გაერთიანება ფუნქციით
print(g)

# სიმრავლეების სხვაობა 
sxvaoba= a1 - b1 # რომელი ელემენტები არ გვხვდება a1 ითად b1 ში
print(sxvaoba)
sxvaoba= b1-a1  # რომელი ელემენტები არ გხვდება b1 ითდან a1 ში
print(sxvaoba)

simetriuliSxvaoba= a1 ^ b1  #აბრუნებს სიმერტრიულ სხბაობას. ანუ გამოიტანე ის ელემენტები რომელიც ურთიერთ საპირისპირო სიმრავლეებში არ გვხდება
print(simetriuliSxvaoba)

# შედარება სიმრავლეების
a1==b1 # უდრის ეს ორი სიმრავლეს ერთმანეთს ? თუ ექვივალენტურია გამოიტანს True თუ არ ემთხვევა გამოიტანს False 
print(a1,b1)
print(a1<b1) # მოგვცემს მცდარობას
c1={1,2,3,4}
print (a1 < c1) # შეიცავს c1 სიმრავლე შეიცავს a1  სიმრავლეს. (პასუხი იქნება ჭეშმარიტება ანუ True)

# თუ გვინდა გამოვიტანოთ ყველა ელემენტი უნდა გამოვიყენოთ ციკლი
for i in a1:
    print(i)


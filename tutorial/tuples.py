# კორტეჟები იგივე tuple
# ერთგვარი სპეციპიური ტიპია პითონში რომელიც ძალიან გავს სიებს მაგრამ სიებისგან განსხვავებით კორტეჟებში მოთავსებულ ელემენტებზე შეუძლებელია დამატების, წაშლის ან რედაქტირების გაკეთება. ანუ ერთხელ რომ შევიტანთ კორტეჟში ინფორმაციას, ერთგვარი ჩაცემენტებული გაქვავებული სტრუქტურაა, და მასზე რაღაც ოპერაციები. შეუძლებელია. დაცულია ზეგავლენისგან
# ერთი და იგივე ინფირმაციისას კორტეჟი უფრო მსუბუქია ვიდრე სია
x=()   # ცარიელი კორტეჟი 
print(type(x)) # tuple
y = tuple()  # ფუნქციით ცარიელი კორტეჟის შექმნა
a = (1,2,3,"test",3.5) # შესაძლებელია სხვა ტიპების ჩადება.  int,float,sring,bull და ასევე სიებიც შეიძლება ჩაიდოს კორტეჟში
b = 6,67.3,4,5,6,True  # ბრჩხილების გარეშეც იქმნება კორტეჟი. 
a = (1)    # ერთ ელემეტნზე არ შეიქმნება კორტეჟი. ეს  იქნება ტაიფით int. იხილეთ ქვედა ხასზე როგორ უნდა შექმნათ ერთ ელემენტიანი კორტეჟ
a = (1,)   # თუ გვინდა ერთ ელემეტიანი კორტეჟის შექმნა აუცილებლად უნდა დავუწეროთ ელემეტის შემდეგ მძიმე
b =  1,    # იგივეა რაც ზევით
c = tuple(range(9))  # tuple() იღებს მხოლოდ ერთ არგუმენტს ამიტომ შეგვიძლია დავიხმაროთ range() ფუნქცია
d = tuple ([ 1,2,3,4,5,6]) # თუ გვინდა მრავალ ელემენტიანი კორტეჟის შექმნა აუცილებლად უნდა ჩავსვათ ან []=ში ან ()-ში. მიიღებს როგორც ერთი არგუმენტი და შემდეგ გაშლის
t = tuple((1,)) # ერთ ელემენტიანი კორტეჟი tuple ფუნქციით

a = 1,2
b = 3,4
print(a+b) # როგორც სიებში ხდება კონკატენაცია. ორი კორტეჟის გაერთიანება
print(a*3) # მოგვცემს  aკორტეჟის ნამრავლს
print(9 in c) # ნიშნავს ცხრა არის c-ში. რადგან არ არის 9 გამოიტანს false
print(9 not in c) # ნიშნავს 9 არ არის c-ში. რადგან არ არის 9 გამოიტან True
print( "რამდენი ელემეტისგან შედგება c-კორტეჟი?: ", len(c))  #len() გამოაქვს რამდენი ელემენტისგან შედგება კორტეჟი
print("მინიმუმი",min(c)) # გამოაქვს მინიმალური ინდექს
print("მაქსიმუმი",max(c)) # გამოაქვს მაქსიმალური ინდექსი
print("აჯამვა ",sum(c)) # არითმეტიკული ფუნქცია, გვაძლევს კორტეჟში მოთავსებული ყველა ელემენტის ჯამს
 
f = (1,2, "test",[3,4],True,67.9) # tuple არის შეუცვლელი მაგრამ თუ კორტეჟში არის სია list , რადგან სია შეცვლადია სიაზე შეგვიძლია ვიმუშაოთ. 
f[3].append([1,2,3]) # კორტეჟში შემავალი სიაში ელემენტების ჩამატება
print("რომელ ინდექსზეა test: ",f.index("test")) # ინდექსის ფუნქცია გვანახებს რომელ ინდექსზეა ელემენტი
a=1,2,3,4,1,3,1,3,1
print("რამდენჯერ გვხვდება 1-იანი",a.count(1))  # ითვლის რამდენჯერ გვხვდება კორტეჯში მითითებული ელემენტი

# ლექსიკონში როგორც ვიცით key არ შეიძლება იყოს list-სია იმიტომ რომ სია არის შეცვლადი და გასაღები არ შეიძლება იყოს შეცვლადი ობიექტი
# რადგან კორტეჟი არის უცვლელი ობიექტი შეგვიძლია გამოვიყენოთ tuple და მივიღებთ მრავალ ელემენტიან გასაღებს ლექსიკონში. მაგალითი იხილეთ ქვემოთ
d = {(1,2,3):'value'}
print("მრავალ მნისვნელობიანი key ლექსიკონში",d)


#მაგალითად გვინდა რაღაცნაირად დავამატოთ კორტეჟში ახალი ელემენტი ან შევცვალოთ
# ამიისთვის კორტეჯი უნდა დავაკონვერთოდ სიად შევცვალოთ რაც გვინდა და ისევ გადავაკონვერტიროთ კორტეჟად.
a = 1,2,3 
print("tuple ა",a)
z = list(a)  
print("გახდა list z-ცვლადში",z)
z.append(299444)
a = tuple(z)
print("დაუბრუნდა ისევ tuple",a)

#შევადაროთ რომელი უფრო მეტს იწონის.  რადგან სიაზე უფრო მეტი ოპერაცია შეიძლება გაკეთდეს სია უფრო მეტს იწონის. 
a = 1,2,3,"test",False,99.99
b = [1,2,3,"test",False,99.99]
print("რამდენს იწონის a: ",a.__sizeof__())
print("რამდენს იწონის b: ",b.__sizeof__())


#როგორ გამოვიტანოთ სათითაოდ კორტეჯიდან ელემენტები
for i in a:          # ერთი ვარიანტი
    print(i)
for i in range(len(a)):   # მეორე ჩახლართული ვარიანტი
    print(a[i])



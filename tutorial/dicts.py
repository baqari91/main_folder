# ლექსიკონები type  dict
# სიებისგან განსხავებით ინდექსის მაგივრად გამოძახებისთვის ვხმარობთ key-s
# მაგალითად    
#    georgia - Tbilisi
#    usa - Washington
#    england - london
#   { key:value, key:value, key:value}

#ცარიელი ლექსიკონის შექმნა
d={}           # პირდაპირი მინიჭებით 
d=dict()       # ფუნქციით
d={'Georgia':'Tbilisi','USA':'Washington','England':'London'}
print(len(d))  #რამდენი წყვილისგან შედგება ლექსიკონი, პასუხი არის 3

c = dict(Spain="Madrid")  #  თუ ფუნქციით ვქმნით ლექსიკონს აღარ სჭირდება key-ს ბრჩხილები. გასაღები თუ გვინდა იყოს რიცხვი ფუნქციით ვერ შევქმნით გამოვა ერორი 
q = {1:'one',2:'two'}     # ამ შემთხვევაში შეიძლება იყოს გასაღები ციფრი
print(q)
q=dict.fromkeys([1,2,3]) # შეიქმნება მითითებული გასაღებები, ხოლო მნიშვნელობები იქნება none
print(q)
q=dict.fromkeys([1,2,3], "Numbers") # ამ შემთხვევაში მნიშვნელობების დეფაულთ სახელი იქნება Numbers. მითითებული მნიშვნელობა
print(q)
# w={[1,2]:'test'}  არ შეიძლება სიის მითითება გასაღბად , რადგან სია არის შეცვლადი მონაცემთა ტიპი. გასაღები უნდა იყოს აუცილებლად შეუცვლადი
print(d['Georgia']) # მითითებულია გასაღები, გამოიტანს ამ გასაღების მნიშვნელობას. თუ არ არის შესაბამისი გასაღები გამოვა ერორი
d["Italy"]="Rome"   # ასეთი კონსტრუქციით ხდება გასაღები:მნიშვნელობის წყვილის დამატება ლექსიკონში
print(d)
del d["Italy"]    # ამოიშლება გასაღები:მნიშვნელობის წყვილი
d["England"]="Liverpul"  # არსებულ გასაღებზე ახალი მნიშვნელობის თავზე გადაწერა

#მიკუთვნებულება
print("USA" in d)
print("USA" not in d)
print("germany" in d) 

#გამოტანა ლუპით
for i in d:
    print(i)        #ასე გამოვა მხოლოდ გასაღებები ლექსიკონიდან
for i in d:
    print(i, d[i])  # ასე კი გასაღები მნიშვნელობის წყვილები. ოღონდ ეს მეთოდი არ არის აქტუალური შემდეგ ვისწავლით გამოყენებად მეთოდს

q.clear()    # ლექსიკონის გასუფთავება

te=d.get("USA", "no") #გეთ ფუნქციაში შეგვყავს გასაღების სახელი და გამოაქვს მნიშვნელობა, თუ ვერ იპოვის შესაბამის გასაღებს გამოაქვს none, თუ გვინდა ნანის მაგივრად გამოვიდეს რაიმე ტექსტი ვწერთ მძიმის შემდეგ "სასურველ ტექსტს".
print(d.setdefault("norway","oslo") ) # setdefault ფუნქცია გამოიტანს მნიშვნელობას მითითებული გასაღების, ხოლო თუ არ არსებობს ასეთი გასაღები შექმნის მას მნიშვნელობა none-ით, თუ გვინდა რომ მივანიჭოთ მნიშვნელობა იგივე ფუნქციით გამოყენებით, მძიმეს მერე უნდა დავწეროთ "მნიშვნელობა"
d.pop("norway")  # pop მეთოდში აუცილებლად უნდა მივუთითოთ გასაღები რომელი წყვილის ამოშლაც გვინდა
d.popitem() # ამოშლის შემთხვევითად გასაღები მნიშვნელობის წყვილს
d.keys()    # აბრუნებს ყველა გასაღებს
d.values()  # გამოაქვს ყველა მნიშვნელობა
d.items()   # გამოაქვს ლექსიკონში არსებული ყველა გასაღები მნიშვნელობის წყვილი
print(d)
# ლუპით გამოტანა
for key in d.keys():
    print(key)
for value in d.values():
    print(value)
for item in d.items():      # ეს მეთოდი გამოიტანს tuple კორტეჟების საღის თუ არ გვაწყობს იხილეთ ქვედა სტრიქონზე
    print(item)
for key,value in d.items():  # items აბრუნებს წყვილებს. გასაღებებს მიხედავს კეი იტერატორი ხოლო მნიშვნელობას ვალუე იტერატორი
    print(key, "=->",value) 

# ლექსიკონში მოთავსება სფეისით დაშორებული სტრინგის რომელსაც უნდა მივანიჭოთ სვადასხვა გასაღები
word = "John Parker USA 5 4 3 5"
s = {}  # ცარიელი ლექსიკონის შემქმნა
word = word.split() # ჯერ დავშალოთ სპეისით დაშორებული მნიშვნელობები ერთმანეთისგან
s["Fname"] = word[0]    # გასაღების სახელის შემქნა და მასზე დამატება ნულოვან ინდექსზე არსებული მნიშვნელობის
s["Lname"] = word[1]
s["country"]=word[2]
s["Marks"]=[]          # გასაღების შექმნა და მასზე მინიჭება ცარიელი სიის რადგან შემდეგ ლუპის გამოყენების მოხდეს რამდენიმე მნიშვნელობის შიგნით ჩასმა
for i in word[3:]:
    s["Marks"].append(int(i))
print(s)